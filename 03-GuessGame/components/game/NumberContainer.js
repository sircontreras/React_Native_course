import {View, Text, StyleSheet, Dimensions} from "react-native";
import Colors from "../../constants/colors";

function NumberContainer({children}){
    return(
        <View style={styles.container}>
            <Text style={styles.numberText}>{children}</Text>
        </View>
    )
}

//DIMENSION API: We also count with 'Dimensions API' which contains info about the device sizes such the width, height, fontScale, scale, etc. And it can take two parameters: 'window' or 'screen'. In ios there's no difference but in android, 'screen' will also include the sizes that cover the top bar, etc. but the 'window' will only contain the 'workable area'. The course doesn't explain this, but I think that the variable was put outside the component so that the 'style' variable can reach its scope.
//This Dimension API approach works good, but it has one downside. It only runs once so when you rotate back your back, the sizes generated by it will remain the same. So React Native offers a reactive alternative that is capable of generate its sizes when the rotation changes. That is the 'useWindowDimensions' hook. This new approach is explained in the 'StartGameScreen.js' document. According to my understanding the Dimension API is a more primitive version of the useWindowDimension hook. The Dimension API could work for us in the case we only needed to calculate dimension one single time, at the beginning.
const deviceWith = Dimensions.get('window').width;

//DEVICE ORIENTATION: By default expo apps are set to be in 'portrait' mode. Remember that that setting can be in 'portrait', 'landscape' or 'default'(it will rotate with the physical phone orientation. Remember that the OS itself have a settings to allow the rotation, please change it as needed first). This setting can be updated in the app.json that is the first level of the project. In there you'll find the 'orientation' property.

const styles = StyleSheet.create({
    container : {
        borderWidth : 4,
        borderColor : Colors.accent500,
        padding: deviceWith < 380 ? 12 : 24, //...Then we can use those variables to mathematical calculations to print stuff conditionally.
        margin : deviceWith < 380 ? 12 : 24,
        borderRadius : 8,
        alignItems : 'center',
        justifyContent: 'center'
    },
    numberText : {
        color : Colors.accent500,
        fontSize : deviceWith < 380 ? 28 : 36,
        fontFamily : 'open-sans-bold',
    }
})

export default NumberContainer;